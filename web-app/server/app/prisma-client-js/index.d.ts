// Code generated by Prisma (prisma@1.23.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  bill: (where?: BillWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  feed: (where?: FeedWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  politician: (where?: PoliticianWhereInput) => Promise<boolean>;
  subscription: (where?: SubscriptionWhereInput) => Promise<boolean>;
  topic: (where?: TopicWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bill: (where: BillWhereUniqueInput) => BillPromise;
  bills: (args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bill>;
  billsConnection: (args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BillConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  feeds: (args?: {
    where?: FeedWhereInput;
    orderBy?: FeedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Feed>;
  feedsConnection: (args?: {
    where?: FeedWhereInput;
    orderBy?: FeedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FeedConnectionPromise;
  notification: (where: NotificationWhereUniqueInput) => NotificationPromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  politician: (where: PoliticianWhereUniqueInput) => PoliticianPromise;
  politicians: (args?: {
    where?: PoliticianWhereInput;
    orderBy?: PoliticianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Politician>;
  politiciansConnection: (args?: {
    where?: PoliticianWhereInput;
    orderBy?: PoliticianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PoliticianConnectionPromise;
  subscriptions: (args?: {
    where?: SubscriptionWhereInput;
    orderBy?: SubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Subscription>;
  subscriptionsConnection: (args?: {
    where?: SubscriptionWhereInput;
    orderBy?: SubscriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubscriptionConnectionPromise;
  topic: (where: TopicWhereUniqueInput) => TopicPromise;
  topics: (args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Topic>;
  topicsConnection: (args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TopicConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBill: (data: BillCreateInput) => BillPromise;
  updateBill: (args: {
    data: BillUpdateInput;
    where: BillWhereUniqueInput;
  }) => BillPromise;
  updateManyBills: (args: {
    data: BillUpdateManyMutationInput;
    where?: BillWhereInput;
  }) => BatchPayloadPromise;
  upsertBill: (args: {
    where: BillWhereUniqueInput;
    create: BillCreateInput;
    update: BillUpdateInput;
  }) => BillPromise;
  deleteBill: (where: BillWhereUniqueInput) => BillPromise;
  deleteManyBills: (where?: BillWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createFeed: (data: FeedCreateInput) => FeedPromise;
  updateManyFeeds: (args: {
    data: FeedUpdateManyMutationInput;
    where?: FeedWhereInput;
  }) => BatchPayloadPromise;
  deleteManyFeeds: (where?: FeedWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createPolitician: (data: PoliticianCreateInput) => PoliticianPromise;
  updatePolitician: (args: {
    data: PoliticianUpdateInput;
    where: PoliticianWhereUniqueInput;
  }) => PoliticianPromise;
  updateManyPoliticians: (args: {
    data: PoliticianUpdateManyMutationInput;
    where?: PoliticianWhereInput;
  }) => BatchPayloadPromise;
  upsertPolitician: (args: {
    where: PoliticianWhereUniqueInput;
    create: PoliticianCreateInput;
    update: PoliticianUpdateInput;
  }) => PoliticianPromise;
  deletePolitician: (where: PoliticianWhereUniqueInput) => PoliticianPromise;
  deleteManyPoliticians: (where?: PoliticianWhereInput) => BatchPayloadPromise;
  createSubscription: (data: SubscriptionCreateInput) => SubscriptionPromise;
  deleteManySubscriptions: (
    where?: SubscriptionWhereInput
  ) => BatchPayloadPromise;
  createTopic: (data: TopicCreateInput) => TopicPromise;
  updateTopic: (args: {
    data: TopicUpdateInput;
    where: TopicWhereUniqueInput;
  }) => TopicPromise;
  updateManyTopics: (args: {
    data: TopicUpdateManyMutationInput;
    where?: TopicWhereInput;
  }) => BatchPayloadPromise;
  upsertTopic: (args: {
    where: TopicWhereUniqueInput;
    create: TopicCreateInput;
    update: TopicUpdateInput;
  }) => TopicPromise;
  deleteTopic: (where: TopicWhereUniqueInput) => TopicPromise;
  deleteManyTopics: (where?: TopicWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  newBillComment: (args?: {}) => CommentSubscription;
  newBill: (args?: {}) => BillSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PoliticianOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "party_ASC"
  | "party_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "chamber_ASC"
  | "chamber_DESC"
  | "state_ASC"
  | "state_DESC"
  | "district_ASC"
  | "district_DESC"
  | "nthCongress_ASC"
  | "nthCongress_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "image_ASC"
  | "image_DESC"
  | "largeImage_ASC"
  | "largeImage_DESC"
  | "website_ASC"
  | "website_DESC"
  | "govUrl_ASC"
  | "govUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Permission =
  | "ADMIN"
  | "USER"
  | "POLITICIANCREATE"
  | "POLITICIANUPDATE"
  | "POLITICIANDELETE"
  | "PERMISSIONUPDATE";

export type BillOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "title_ASC"
  | "title_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "congressNumber_ASC"
  | "congressNumber_DESC"
  | "chamber_ASC"
  | "chamber_DESC"
  | "committees_ASC"
  | "committees_DESC"
  | "link_ASC"
  | "link_DESC"
  | "sponsor_ASC"
  | "sponsor_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "reply_ASC"
  | "reply_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TopicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FeedOrderByInput =
  | "count_ASC"
  | "count_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SubscriptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface UserUpdateWithoutUpvotedBillsDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  myPoliticians?: PoliticianUpdateManyWithoutFollowersInput;
  myBills?: BillUpdateManyWithoutFollowersInput;
  downvotedBills?: BillUpdateManyWithoutDownvotesInput;
  billComments?: CommentUpdateManyWithoutAuthorInput;
  topicComments?: TopicUpdateManyWithoutCommentersInput;
  notifications?: NotificationUpdateManyWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface BillUpdateDataInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianUpdateManyWithoutCoBillsInput;
  actions?: BillUpdateactionsInput;
  followers?: UserUpdateManyWithoutMyBillsInput;
  upvotes?: UserUpdateManyWithoutUpvotedBillsInput;
  downvotes?: UserUpdateManyWithoutDownvotedBillsInput;
  comments?: CommentUpdateManyWithoutBillInput;
}

export type BillWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateManyWithoutMyBillsInput {
  create?: UserCreateWithoutMyBillsInput[] | UserCreateWithoutMyBillsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutMyBillsInput[]
    | UserUpdateWithWhereUniqueWithoutMyBillsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutMyBillsInput[]
    | UserUpsertWithWhereUniqueWithoutMyBillsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface NotificationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: NotificationWhereInput[] | NotificationWhereInput;
  OR?: NotificationWhereInput[] | NotificationWhereInput;
  NOT?: NotificationWhereInput[] | NotificationWhereInput;
}

export interface UserUpdateWithWhereUniqueWithoutMyBillsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMyBillsDataInput;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  reply?: String;
  reply_not?: String;
  reply_in?: String[] | String;
  reply_not_in?: String[] | String;
  reply_lt?: String;
  reply_lte?: String;
  reply_gt?: String;
  reply_gte?: String;
  reply_contains?: String;
  reply_not_contains?: String;
  reply_starts_with?: String;
  reply_not_starts_with?: String;
  reply_ends_with?: String;
  reply_not_ends_with?: String;
  bill?: BillWhereInput;
  author?: UserWhereInput;
  politiciansMentioned_every?: PoliticianWhereInput;
  politiciansMentioned_some?: PoliticianWhereInput;
  politiciansMentioned_none?: PoliticianWhereInput;
  topic?: TopicWhereInput;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface UserUpdateWithoutMyBillsDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  myPoliticians?: PoliticianUpdateManyWithoutFollowersInput;
  upvotedBills?: BillUpdateManyWithoutUpvotesInput;
  downvotedBills?: BillUpdateManyWithoutDownvotesInput;
  billComments?: CommentUpdateManyWithoutAuthorInput;
  topicComments?: TopicUpdateManyWithoutCommentersInput;
  notifications?: NotificationUpdateManyWithoutUserInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  myPoliticians_every?: PoliticianWhereInput;
  myPoliticians_some?: PoliticianWhereInput;
  myPoliticians_none?: PoliticianWhereInput;
  myBills_every?: BillWhereInput;
  myBills_some?: BillWhereInput;
  myBills_none?: BillWhereInput;
  upvotedBills_every?: BillWhereInput;
  upvotedBills_some?: BillWhereInput;
  upvotedBills_none?: BillWhereInput;
  downvotedBills_every?: BillWhereInput;
  downvotedBills_some?: BillWhereInput;
  downvotedBills_none?: BillWhereInput;
  billComments_every?: CommentWhereInput;
  billComments_some?: CommentWhereInput;
  billComments_none?: CommentWhereInput;
  topicComments_every?: TopicWhereInput;
  topicComments_some?: TopicWhereInput;
  topicComments_none?: TopicWhereInput;
  notifications_every?: NotificationWhereInput;
  notifications_some?: NotificationWhereInput;
  notifications_none?: NotificationWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpdateOneWithoutMyPoliticiansInput {
  create?: UserCreateWithoutMyPoliticiansInput;
  update?: UserUpdateWithoutMyPoliticiansDataInput;
  upsert?: UserUpsertWithoutMyPoliticiansInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface BillUpsertWithWhereUniqueNestedInput {
  where: BillWhereUniqueInput;
  update: BillUpdateDataInput;
  create: BillCreateInput;
}

export interface UserUpdateWithoutMyPoliticiansDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  myBills?: BillUpdateManyWithoutFollowersInput;
  upvotedBills?: BillUpdateManyWithoutUpvotesInput;
  downvotedBills?: BillUpdateManyWithoutDownvotesInput;
  billComments?: CommentUpdateManyWithoutAuthorInput;
  topicComments?: TopicUpdateManyWithoutCommentersInput;
  notifications?: NotificationUpdateManyWithoutUserInput;
}

export interface BillUpdateManyWithoutUpvotesInput {
  create?: BillCreateWithoutUpvotesInput[] | BillCreateWithoutUpvotesInput;
  delete?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  connect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  disconnect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  update?:
    | BillUpdateWithWhereUniqueWithoutUpvotesInput[]
    | BillUpdateWithWhereUniqueWithoutUpvotesInput;
  upsert?:
    | BillUpsertWithWhereUniqueWithoutUpvotesInput[]
    | BillUpsertWithWhereUniqueWithoutUpvotesInput;
  deleteMany?: BillScalarWhereInput[] | BillScalarWhereInput;
  updateMany?:
    | BillUpdateManyWithWhereNestedInput[]
    | BillUpdateManyWithWhereNestedInput;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface PoliticianWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  party?: String;
  party_not?: String;
  party_in?: String[] | String;
  party_not_in?: String[] | String;
  party_lt?: String;
  party_lte?: String;
  party_gt?: String;
  party_gte?: String;
  party_contains?: String;
  party_not_contains?: String;
  party_starts_with?: String;
  party_not_starts_with?: String;
  party_ends_with?: String;
  party_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  chamber?: String;
  chamber_not?: String;
  chamber_in?: String[] | String;
  chamber_not_in?: String[] | String;
  chamber_lt?: String;
  chamber_lte?: String;
  chamber_gt?: String;
  chamber_gte?: String;
  chamber_contains?: String;
  chamber_not_contains?: String;
  chamber_starts_with?: String;
  chamber_not_starts_with?: String;
  chamber_ends_with?: String;
  chamber_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  district?: Int;
  district_not?: Int;
  district_in?: Int[] | Int;
  district_not_in?: Int[] | Int;
  district_lt?: Int;
  district_lte?: Int;
  district_gt?: Int;
  district_gte?: Int;
  nthCongress?: String;
  nthCongress_not?: String;
  nthCongress_in?: String[] | String;
  nthCongress_not_in?: String[] | String;
  nthCongress_lt?: String;
  nthCongress_lte?: String;
  nthCongress_gt?: String;
  nthCongress_gte?: String;
  nthCongress_contains?: String;
  nthCongress_not_contains?: String;
  nthCongress_starts_with?: String;
  nthCongress_not_starts_with?: String;
  nthCongress_ends_with?: String;
  nthCongress_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  gender?: String;
  gender_not?: String;
  gender_in?: String[] | String;
  gender_not_in?: String[] | String;
  gender_lt?: String;
  gender_lte?: String;
  gender_gt?: String;
  gender_gte?: String;
  gender_contains?: String;
  gender_not_contains?: String;
  gender_starts_with?: String;
  gender_not_starts_with?: String;
  gender_ends_with?: String;
  gender_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  largeImage?: String;
  largeImage_not?: String;
  largeImage_in?: String[] | String;
  largeImage_not_in?: String[] | String;
  largeImage_lt?: String;
  largeImage_lte?: String;
  largeImage_gt?: String;
  largeImage_gte?: String;
  largeImage_contains?: String;
  largeImage_not_contains?: String;
  largeImage_starts_with?: String;
  largeImage_not_starts_with?: String;
  largeImage_ends_with?: String;
  largeImage_not_ends_with?: String;
  website?: String;
  website_not?: String;
  website_in?: String[] | String;
  website_not_in?: String[] | String;
  website_lt?: String;
  website_lte?: String;
  website_gt?: String;
  website_gte?: String;
  website_contains?: String;
  website_not_contains?: String;
  website_starts_with?: String;
  website_not_starts_with?: String;
  website_ends_with?: String;
  website_not_ends_with?: String;
  govUrl?: String;
  govUrl_not?: String;
  govUrl_in?: String[] | String;
  govUrl_not_in?: String[] | String;
  govUrl_lt?: String;
  govUrl_lte?: String;
  govUrl_gt?: String;
  govUrl_gte?: String;
  govUrl_contains?: String;
  govUrl_not_contains?: String;
  govUrl_starts_with?: String;
  govUrl_not_starts_with?: String;
  govUrl_ends_with?: String;
  govUrl_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  followers?: UserWhereInput;
  bills_every?: BillWhereInput;
  bills_some?: BillWhereInput;
  bills_none?: BillWhereInput;
  coBills_every?: BillWhereInput;
  coBills_some?: BillWhereInput;
  coBills_none?: BillWhereInput;
  mentions_every?: CommentWhereInput;
  mentions_some?: CommentWhereInput;
  mentions_none?: CommentWhereInput;
  AND?: PoliticianWhereInput[] | PoliticianWhereInput;
  OR?: PoliticianWhereInput[] | PoliticianWhereInput;
  NOT?: PoliticianWhereInput[] | PoliticianWhereInput;
}

export interface BillUpdateManyWithoutFollowersInput {
  create?: BillCreateWithoutFollowersInput[] | BillCreateWithoutFollowersInput;
  delete?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  connect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  disconnect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  update?:
    | BillUpdateWithWhereUniqueWithoutFollowersInput[]
    | BillUpdateWithWhereUniqueWithoutFollowersInput;
  upsert?:
    | BillUpsertWithWhereUniqueWithoutFollowersInput[]
    | BillUpsertWithWhereUniqueWithoutFollowersInput;
  deleteMany?: BillScalarWhereInput[] | BillScalarWhereInput;
  updateMany?:
    | BillUpdateManyWithWhereNestedInput[]
    | BillUpdateManyWithWhereNestedInput;
}

export interface TopicUpdateManyMutationInput {
  title?: String;
}

export interface BillUpdateWithWhereUniqueWithoutFollowersInput {
  where: BillWhereUniqueInput;
  data: BillUpdateWithoutFollowersDataInput;
}

export interface TopicCreateInput {
  title?: String;
  comments?: CommentCreateManyWithoutTopicInput;
  commenters?: UserCreateManyWithoutTopicCommentsInput;
}

export interface BillUpdateWithoutFollowersDataInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianUpdateManyWithoutCoBillsInput;
  actions?: BillUpdateactionsInput;
  upvotes?: UserUpdateManyWithoutUpvotedBillsInput;
  downvotes?: UserUpdateManyWithoutDownvotedBillsInput;
  comments?: CommentUpdateManyWithoutBillInput;
}

export interface CommentCreateOneInput {
  create?: CommentCreateInput;
  connect?: CommentWhereUniqueInput;
}

export interface BillUpdateactionsInput {
  set?: String[] | String;
}

export interface SubscriptionCreateInput {
  newBillComment?: CommentCreateOneInput;
  newBill?: BillCreateOneInput;
}

export interface UserUpdateManyWithoutUpvotedBillsInput {
  create?:
    | UserCreateWithoutUpvotedBillsInput[]
    | UserCreateWithoutUpvotedBillsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutUpvotedBillsInput[]
    | UserUpdateWithWhereUniqueWithoutUpvotedBillsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutUpvotedBillsInput[]
    | UserUpsertWithWhereUniqueWithoutUpvotedBillsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface PoliticianUpdateInput {
  party?: String;
  name?: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
  followers?: UserUpdateOneWithoutMyPoliticiansInput;
  bills?: BillUpdateManyInput;
  coBills?: BillUpdateManyWithoutCoSponsorsInput;
  mentions?: CommentUpdateManyWithoutPoliticiansMentionedInput;
}

export interface UserUpdateWithWhereUniqueWithoutUpvotedBillsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutUpvotedBillsDataInput;
}

export interface NotificationUpdateManyMutationInput {
  label?: String;
  type?: String;
}

export interface CommentUpsertWithWhereUniqueWithoutPoliticiansMentionedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPoliticiansMentionedDataInput;
  create: CommentCreateWithoutPoliticiansMentionedInput;
}

export interface UserUpdateWithoutNotificationsDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  myPoliticians?: PoliticianUpdateManyWithoutFollowersInput;
  myBills?: BillUpdateManyWithoutFollowersInput;
  upvotedBills?: BillUpdateManyWithoutUpvotesInput;
  downvotedBills?: BillUpdateManyWithoutDownvotesInput;
  billComments?: CommentUpdateManyWithoutAuthorInput;
  topicComments?: TopicUpdateManyWithoutCommentersInput;
}

export interface PoliticianUpdateManyWithoutFollowersInput {
  create?:
    | PoliticianCreateWithoutFollowersInput[]
    | PoliticianCreateWithoutFollowersInput;
  delete?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
  connect?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
  disconnect?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
  update?:
    | PoliticianUpdateWithWhereUniqueWithoutFollowersInput[]
    | PoliticianUpdateWithWhereUniqueWithoutFollowersInput;
  upsert?:
    | PoliticianUpsertWithWhereUniqueWithoutFollowersInput[]
    | PoliticianUpsertWithWhereUniqueWithoutFollowersInput;
  deleteMany?: PoliticianScalarWhereInput[] | PoliticianScalarWhereInput;
  updateMany?:
    | PoliticianUpdateManyWithWhereNestedInput[]
    | PoliticianUpdateManyWithWhereNestedInput;
}

export interface NotificationUpdateInput {
  label?: String;
  type?: String;
  user?: UserUpdateOneWithoutNotificationsInput;
}

export interface PoliticianUpdateWithWhereUniqueWithoutFollowersInput {
  where: PoliticianWhereUniqueInput;
  data: PoliticianUpdateWithoutFollowersDataInput;
}

export interface UserCreateWithoutNotificationsInput {
  name: String;
  email: String;
  password?: String;
  permissions?: UserCreatepermissionsInput;
  myPoliticians?: PoliticianCreateManyWithoutFollowersInput;
  myBills?: BillCreateManyWithoutFollowersInput;
  upvotedBills?: BillCreateManyWithoutUpvotesInput;
  downvotedBills?: BillCreateManyWithoutDownvotesInput;
  billComments?: CommentCreateManyWithoutAuthorInput;
  topicComments?: TopicCreateManyWithoutCommentersInput;
}

export interface PoliticianUpdateWithoutFollowersDataInput {
  party?: String;
  name?: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
  bills?: BillUpdateManyInput;
  coBills?: BillUpdateManyWithoutCoSponsorsInput;
  mentions?: CommentUpdateManyWithoutPoliticiansMentionedInput;
}

export interface NotificationCreateInput {
  label?: String;
  type?: String;
  user?: UserCreateOneWithoutNotificationsInput;
}

export interface BillUpdateManyInput {
  create?: BillCreateInput[] | BillCreateInput;
  update?:
    | BillUpdateWithWhereUniqueNestedInput[]
    | BillUpdateWithWhereUniqueNestedInput;
  upsert?:
    | BillUpsertWithWhereUniqueNestedInput[]
    | BillUpsertWithWhereUniqueNestedInput;
  delete?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  connect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  disconnect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  deleteMany?: BillScalarWhereInput[] | BillScalarWhereInput;
  updateMany?:
    | BillUpdateManyWithWhereNestedInput[]
    | BillUpdateManyWithWhereNestedInput;
}

export interface FeedUpdateManyMutationInput {
  count?: Int;
}

export interface BillUpdateWithWhereUniqueNestedInput {
  where: BillWhereUniqueInput;
  data: BillUpdateDataInput;
}

export interface PoliticianCreateManyInput {
  create?: PoliticianCreateInput[] | PoliticianCreateInput;
  connect?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
}

export interface TopicWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  commenters_every?: UserWhereInput;
  commenters_some?: UserWhereInput;
  commenters_none?: UserWhereInput;
  AND?: TopicWhereInput[] | TopicWhereInput;
  OR?: TopicWhereInput[] | TopicWhereInput;
  NOT?: TopicWhereInput[] | TopicWhereInput;
}

export interface FeedCreateInput {
  politicians?: PoliticianCreateManyInput;
  bills?: BillCreateManyInput;
  count: Int;
}

export interface CommentUpdateWithoutPoliticiansMentionedDataInput {
  content?: String;
  reply?: String;
  bill?: BillUpdateOneWithoutCommentsInput;
  author?: UserUpdateOneWithoutBillCommentsInput;
  topic?: TopicUpdateOneWithoutCommentsInput;
}

export interface CommentUpdateInput {
  content?: String;
  reply?: String;
  bill?: BillUpdateOneWithoutCommentsInput;
  author?: UserUpdateOneWithoutBillCommentsInput;
  politiciansMentioned?: PoliticianUpdateManyWithoutMentionsInput;
  topic?: TopicUpdateOneWithoutCommentsInput;
}

export interface BillWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  summary?: String;
  summary_not?: String;
  summary_in?: String[] | String;
  summary_not_in?: String[] | String;
  summary_lt?: String;
  summary_lte?: String;
  summary_gt?: String;
  summary_gte?: String;
  summary_contains?: String;
  summary_not_contains?: String;
  summary_starts_with?: String;
  summary_not_starts_with?: String;
  summary_ends_with?: String;
  summary_not_ends_with?: String;
  congressNumber?: String;
  congressNumber_not?: String;
  congressNumber_in?: String[] | String;
  congressNumber_not_in?: String[] | String;
  congressNumber_lt?: String;
  congressNumber_lte?: String;
  congressNumber_gt?: String;
  congressNumber_gte?: String;
  congressNumber_contains?: String;
  congressNumber_not_contains?: String;
  congressNumber_starts_with?: String;
  congressNumber_not_starts_with?: String;
  congressNumber_ends_with?: String;
  congressNumber_not_ends_with?: String;
  chamber?: String;
  chamber_not?: String;
  chamber_in?: String[] | String;
  chamber_not_in?: String[] | String;
  chamber_lt?: String;
  chamber_lte?: String;
  chamber_gt?: String;
  chamber_gte?: String;
  chamber_contains?: String;
  chamber_not_contains?: String;
  chamber_starts_with?: String;
  chamber_not_starts_with?: String;
  chamber_ends_with?: String;
  chamber_not_ends_with?: String;
  committees?: String;
  committees_not?: String;
  committees_in?: String[] | String;
  committees_not_in?: String[] | String;
  committees_lt?: String;
  committees_lte?: String;
  committees_gt?: String;
  committees_gte?: String;
  committees_contains?: String;
  committees_not_contains?: String;
  committees_starts_with?: String;
  committees_not_starts_with?: String;
  committees_ends_with?: String;
  committees_not_ends_with?: String;
  link?: String;
  link_not?: String;
  link_in?: String[] | String;
  link_not_in?: String[] | String;
  link_lt?: String;
  link_lte?: String;
  link_gt?: String;
  link_gte?: String;
  link_contains?: String;
  link_not_contains?: String;
  link_starts_with?: String;
  link_not_starts_with?: String;
  link_ends_with?: String;
  link_not_ends_with?: String;
  sponsor?: String;
  sponsor_not?: String;
  sponsor_in?: String[] | String;
  sponsor_not_in?: String[] | String;
  sponsor_lt?: String;
  sponsor_lte?: String;
  sponsor_gt?: String;
  sponsor_gte?: String;
  sponsor_contains?: String;
  sponsor_not_contains?: String;
  sponsor_starts_with?: String;
  sponsor_not_starts_with?: String;
  sponsor_ends_with?: String;
  sponsor_not_ends_with?: String;
  coSponsors_every?: PoliticianWhereInput;
  coSponsors_some?: PoliticianWhereInput;
  coSponsors_none?: PoliticianWhereInput;
  followers_every?: UserWhereInput;
  followers_some?: UserWhereInput;
  followers_none?: UserWhereInput;
  upvotes_every?: UserWhereInput;
  upvotes_some?: UserWhereInput;
  upvotes_none?: UserWhereInput;
  downvotes_every?: UserWhereInput;
  downvotes_some?: UserWhereInput;
  downvotes_none?: UserWhereInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  AND?: BillWhereInput[] | BillWhereInput;
  OR?: BillWhereInput[] | BillWhereInput;
  NOT?: BillWhereInput[] | BillWhereInput;
}

export type TopicWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CommentUpdateWithWhereUniqueWithoutPoliticiansMentionedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPoliticiansMentionedDataInput;
}

export interface PoliticianUpsertWithWhereUniqueWithoutCoBillsInput {
  where: PoliticianWhereUniqueInput;
  update: PoliticianUpdateWithoutCoBillsDataInput;
  create: PoliticianCreateWithoutCoBillsInput;
}

export interface CommentUpdateManyWithoutPoliticiansMentionedInput {
  create?:
    | CommentCreateWithoutPoliticiansMentionedInput[]
    | CommentCreateWithoutPoliticiansMentionedInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutPoliticiansMentionedInput[]
    | CommentUpdateWithWhereUniqueWithoutPoliticiansMentionedInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutPoliticiansMentionedInput[]
    | CommentUpsertWithWhereUniqueWithoutPoliticiansMentionedInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface BillUpdateWithWhereUniqueWithoutUpvotesInput {
  where: BillWhereUniqueInput;
  data: BillUpdateWithoutUpvotesDataInput;
}

export interface UserUpsertWithWhereUniqueWithoutUpvotedBillsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutUpvotedBillsDataInput;
  create: UserCreateWithoutUpvotedBillsInput;
}

export interface BillUpdateWithoutUpvotesDataInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianUpdateManyWithoutCoBillsInput;
  actions?: BillUpdateactionsInput;
  followers?: UserUpdateManyWithoutMyBillsInput;
  downvotes?: UserUpdateManyWithoutDownvotedBillsInput;
  comments?: CommentUpdateManyWithoutBillInput;
}

export interface PoliticianCreateManyWithoutCoBillsInput {
  create?:
    | PoliticianCreateWithoutCoBillsInput[]
    | PoliticianCreateWithoutCoBillsInput;
  connect?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
}

export interface UserUpdateManyWithoutDownvotedBillsInput {
  create?:
    | UserCreateWithoutDownvotedBillsInput[]
    | UserCreateWithoutDownvotedBillsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutDownvotedBillsInput[]
    | UserUpdateWithWhereUniqueWithoutDownvotedBillsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutDownvotedBillsInput[]
    | UserUpsertWithWhereUniqueWithoutDownvotedBillsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutMyPoliticiansInput {
  create?: UserCreateWithoutMyPoliticiansInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithWhereUniqueWithoutDownvotedBillsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutDownvotedBillsDataInput;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface UserUpdateWithoutDownvotedBillsDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  myPoliticians?: PoliticianUpdateManyWithoutFollowersInput;
  myBills?: BillUpdateManyWithoutFollowersInput;
  upvotedBills?: BillUpdateManyWithoutUpvotesInput;
  billComments?: CommentUpdateManyWithoutAuthorInput;
  topicComments?: TopicUpdateManyWithoutCommentersInput;
  notifications?: NotificationUpdateManyWithoutUserInput;
}

export interface BillCreateWithoutFollowersInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianCreateManyWithoutCoBillsInput;
  actions?: BillCreateactionsInput;
  upvotes?: UserCreateManyWithoutUpvotedBillsInput;
  downvotes?: UserCreateManyWithoutDownvotedBillsInput;
  comments?: CommentCreateManyWithoutBillInput;
}

export interface CommentUpdateManyWithoutAuthorInput {
  create?: CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    | CommentUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    | CommentUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface UserCreateManyWithoutUpvotedBillsInput {
  create?:
    | UserCreateWithoutUpvotedBillsInput[]
    | UserCreateWithoutUpvotedBillsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAuthorDataInput;
}

export interface PoliticianCreateManyWithoutFollowersInput {
  create?:
    | PoliticianCreateWithoutFollowersInput[]
    | PoliticianCreateWithoutFollowersInput;
  connect?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
}

export interface CommentUpdateWithoutAuthorDataInput {
  content?: String;
  reply?: String;
  bill?: BillUpdateOneWithoutCommentsInput;
  politiciansMentioned?: PoliticianUpdateManyWithoutMentionsInput;
  topic?: TopicUpdateOneWithoutCommentsInput;
}

export interface BillCreateManyInput {
  create?: BillCreateInput[] | BillCreateInput;
  connect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
}

export interface BillUpdateOneWithoutCommentsInput {
  create?: BillCreateWithoutCommentsInput;
  update?: BillUpdateWithoutCommentsDataInput;
  upsert?: BillUpsertWithoutCommentsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: BillWhereUniqueInput;
}

export interface BillCreateWithoutCoSponsorsInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  actions?: BillCreateactionsInput;
  followers?: UserCreateManyWithoutMyBillsInput;
  upvotes?: UserCreateManyWithoutUpvotedBillsInput;
  downvotes?: UserCreateManyWithoutDownvotedBillsInput;
  comments?: CommentCreateManyWithoutBillInput;
}

export interface BillUpdateWithoutCommentsDataInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianUpdateManyWithoutCoBillsInput;
  actions?: BillUpdateactionsInput;
  followers?: UserUpdateManyWithoutMyBillsInput;
  upvotes?: UserUpdateManyWithoutUpvotedBillsInput;
  downvotes?: UserUpdateManyWithoutDownvotedBillsInput;
}

export interface UserCreateWithoutMyBillsInput {
  name: String;
  email: String;
  password?: String;
  permissions?: UserCreatepermissionsInput;
  myPoliticians?: PoliticianCreateManyWithoutFollowersInput;
  upvotedBills?: BillCreateManyWithoutUpvotesInput;
  downvotedBills?: BillCreateManyWithoutDownvotesInput;
  billComments?: CommentCreateManyWithoutAuthorInput;
  topicComments?: TopicCreateManyWithoutCommentersInput;
  notifications?: NotificationCreateManyWithoutUserInput;
}

export interface BillUpsertWithoutCommentsInput {
  update: BillUpdateWithoutCommentsDataInput;
  create: BillCreateWithoutCommentsInput;
}

export interface BillCreateWithoutUpvotesInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianCreateManyWithoutCoBillsInput;
  actions?: BillCreateactionsInput;
  followers?: UserCreateManyWithoutMyBillsInput;
  downvotes?: UserCreateManyWithoutDownvotedBillsInput;
  comments?: CommentCreateManyWithoutBillInput;
}

export interface PoliticianUpdateManyWithoutMentionsInput {
  create?:
    | PoliticianCreateWithoutMentionsInput[]
    | PoliticianCreateWithoutMentionsInput;
  delete?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
  connect?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
  disconnect?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
  update?:
    | PoliticianUpdateWithWhereUniqueWithoutMentionsInput[]
    | PoliticianUpdateWithWhereUniqueWithoutMentionsInput;
  upsert?:
    | PoliticianUpsertWithWhereUniqueWithoutMentionsInput[]
    | PoliticianUpsertWithWhereUniqueWithoutMentionsInput;
  deleteMany?: PoliticianScalarWhereInput[] | PoliticianScalarWhereInput;
  updateMany?:
    | PoliticianUpdateManyWithWhereNestedInput[]
    | PoliticianUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutDownvotedBillsInput {
  name: String;
  email: String;
  password?: String;
  permissions?: UserCreatepermissionsInput;
  myPoliticians?: PoliticianCreateManyWithoutFollowersInput;
  myBills?: BillCreateManyWithoutFollowersInput;
  upvotedBills?: BillCreateManyWithoutUpvotesInput;
  billComments?: CommentCreateManyWithoutAuthorInput;
  topicComments?: TopicCreateManyWithoutCommentersInput;
  notifications?: NotificationCreateManyWithoutUserInput;
}

export interface PoliticianUpdateWithWhereUniqueWithoutMentionsInput {
  where: PoliticianWhereUniqueInput;
  data: PoliticianUpdateWithoutMentionsDataInput;
}

export interface CommentCreateWithoutAuthorInput {
  content?: String;
  reply?: String;
  bill?: BillCreateOneWithoutCommentsInput;
  politiciansMentioned?: PoliticianCreateManyWithoutMentionsInput;
  topic?: TopicCreateOneWithoutCommentsInput;
}

export interface PoliticianUpdateWithoutMentionsDataInput {
  party?: String;
  name?: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
  followers?: UserUpdateOneWithoutMyPoliticiansInput;
  bills?: BillUpdateManyInput;
  coBills?: BillUpdateManyWithoutCoSponsorsInput;
}

export interface BillCreateWithoutCommentsInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianCreateManyWithoutCoBillsInput;
  actions?: BillCreateactionsInput;
  followers?: UserCreateManyWithoutMyBillsInput;
  upvotes?: UserCreateManyWithoutUpvotedBillsInput;
  downvotes?: UserCreateManyWithoutDownvotedBillsInput;
}

export interface BillUpdateManyWithoutCoSponsorsInput {
  create?:
    | BillCreateWithoutCoSponsorsInput[]
    | BillCreateWithoutCoSponsorsInput;
  delete?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  connect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  disconnect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  update?:
    | BillUpdateWithWhereUniqueWithoutCoSponsorsInput[]
    | BillUpdateWithWhereUniqueWithoutCoSponsorsInput;
  upsert?:
    | BillUpsertWithWhereUniqueWithoutCoSponsorsInput[]
    | BillUpsertWithWhereUniqueWithoutCoSponsorsInput;
  deleteMany?: BillScalarWhereInput[] | BillScalarWhereInput;
  updateMany?:
    | BillUpdateManyWithWhereNestedInput[]
    | BillUpdateManyWithWhereNestedInput;
}

export interface PoliticianCreateWithoutMentionsInput {
  party?: String;
  name: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
  followers?: UserCreateOneWithoutMyPoliticiansInput;
  bills?: BillCreateManyInput;
  coBills?: BillCreateManyWithoutCoSponsorsInput;
}

export interface BillUpdateWithWhereUniqueWithoutCoSponsorsInput {
  where: BillWhereUniqueInput;
  data: BillUpdateWithoutCoSponsorsDataInput;
}

export interface TopicCreateWithoutCommentsInput {
  title?: String;
  commenters?: UserCreateManyWithoutTopicCommentsInput;
}

export interface BillUpdateWithoutCoSponsorsDataInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  actions?: BillUpdateactionsInput;
  followers?: UserUpdateManyWithoutMyBillsInput;
  upvotes?: UserUpdateManyWithoutUpvotedBillsInput;
  downvotes?: UserUpdateManyWithoutDownvotedBillsInput;
  comments?: CommentUpdateManyWithoutBillInput;
}

export interface UserCreateWithoutTopicCommentsInput {
  name: String;
  email: String;
  password?: String;
  permissions?: UserCreatepermissionsInput;
  myPoliticians?: PoliticianCreateManyWithoutFollowersInput;
  myBills?: BillCreateManyWithoutFollowersInput;
  upvotedBills?: BillCreateManyWithoutUpvotesInput;
  downvotedBills?: BillCreateManyWithoutDownvotesInput;
  billComments?: CommentCreateManyWithoutAuthorInput;
  notifications?: NotificationCreateManyWithoutUserInput;
}

export interface CommentUpdateManyWithoutBillInput {
  create?: CommentCreateWithoutBillInput[] | CommentCreateWithoutBillInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutBillInput[]
    | CommentUpdateWithWhereUniqueWithoutBillInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutBillInput[]
    | CommentUpsertWithWhereUniqueWithoutBillInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface BillCreateWithoutDownvotesInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianCreateManyWithoutCoBillsInput;
  actions?: BillCreateactionsInput;
  followers?: UserCreateManyWithoutMyBillsInput;
  upvotes?: UserCreateManyWithoutUpvotedBillsInput;
  comments?: CommentCreateManyWithoutBillInput;
}

export interface CommentUpdateWithWhereUniqueWithoutBillInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutBillDataInput;
}

export interface CommentCreateWithoutBillInput {
  content?: String;
  reply?: String;
  author?: UserCreateOneWithoutBillCommentsInput;
  politiciansMentioned?: PoliticianCreateManyWithoutMentionsInput;
  topic?: TopicCreateOneWithoutCommentsInput;
}

export interface CommentUpdateWithoutBillDataInput {
  content?: String;
  reply?: String;
  author?: UserUpdateOneWithoutBillCommentsInput;
  politiciansMentioned?: PoliticianUpdateManyWithoutMentionsInput;
  topic?: TopicUpdateOneWithoutCommentsInput;
}

export interface UserCreateWithoutBillCommentsInput {
  name: String;
  email: String;
  password?: String;
  permissions?: UserCreatepermissionsInput;
  myPoliticians?: PoliticianCreateManyWithoutFollowersInput;
  myBills?: BillCreateManyWithoutFollowersInput;
  upvotedBills?: BillCreateManyWithoutUpvotesInput;
  downvotedBills?: BillCreateManyWithoutDownvotesInput;
  topicComments?: TopicCreateManyWithoutCommentersInput;
  notifications?: NotificationCreateManyWithoutUserInput;
}

export interface UserUpdateOneWithoutBillCommentsInput {
  create?: UserCreateWithoutBillCommentsInput;
  update?: UserUpdateWithoutBillCommentsDataInput;
  upsert?: UserUpsertWithoutBillCommentsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface TopicCreateWithoutCommentersInput {
  title?: String;
  comments?: CommentCreateManyWithoutTopicInput;
}

export interface UserUpdateWithoutBillCommentsDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  myPoliticians?: PoliticianUpdateManyWithoutFollowersInput;
  myBills?: BillUpdateManyWithoutFollowersInput;
  upvotedBills?: BillUpdateManyWithoutUpvotesInput;
  downvotedBills?: BillUpdateManyWithoutDownvotesInput;
  topicComments?: TopicUpdateManyWithoutCommentersInput;
  notifications?: NotificationUpdateManyWithoutUserInput;
}

export interface CommentCreateWithoutTopicInput {
  content?: String;
  reply?: String;
  bill?: BillCreateOneWithoutCommentsInput;
  author?: UserCreateOneWithoutBillCommentsInput;
  politiciansMentioned?: PoliticianCreateManyWithoutMentionsInput;
}

export interface BillUpdateManyWithoutDownvotesInput {
  create?: BillCreateWithoutDownvotesInput[] | BillCreateWithoutDownvotesInput;
  delete?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  connect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  disconnect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
  update?:
    | BillUpdateWithWhereUniqueWithoutDownvotesInput[]
    | BillUpdateWithWhereUniqueWithoutDownvotesInput;
  upsert?:
    | BillUpsertWithWhereUniqueWithoutDownvotesInput[]
    | BillUpsertWithWhereUniqueWithoutDownvotesInput;
  deleteMany?: BillScalarWhereInput[] | BillScalarWhereInput;
  updateMany?:
    | BillUpdateManyWithWhereNestedInput[]
    | BillUpdateManyWithWhereNestedInput;
}

export interface NotificationCreateWithoutUserInput {
  label?: String;
  type?: String;
}

export interface BillUpdateWithWhereUniqueWithoutDownvotesInput {
  where: BillWhereUniqueInput;
  data: BillUpdateWithoutDownvotesDataInput;
}

export interface CommentCreateWithoutPoliticiansMentionedInput {
  content?: String;
  reply?: String;
  bill?: BillCreateOneWithoutCommentsInput;
  author?: UserCreateOneWithoutBillCommentsInput;
  topic?: TopicCreateOneWithoutCommentsInput;
}

export interface BillUpdateWithoutDownvotesDataInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianUpdateManyWithoutCoBillsInput;
  actions?: BillUpdateactionsInput;
  followers?: UserUpdateManyWithoutMyBillsInput;
  upvotes?: UserUpdateManyWithoutUpvotedBillsInput;
  comments?: CommentUpdateManyWithoutBillInput;
}

export interface PoliticianUpdateManyWithoutCoBillsInput {
  create?:
    | PoliticianCreateWithoutCoBillsInput[]
    | PoliticianCreateWithoutCoBillsInput;
  delete?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
  connect?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
  disconnect?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
  update?:
    | PoliticianUpdateWithWhereUniqueWithoutCoBillsInput[]
    | PoliticianUpdateWithWhereUniqueWithoutCoBillsInput;
  upsert?:
    | PoliticianUpsertWithWhereUniqueWithoutCoBillsInput[]
    | PoliticianUpsertWithWhereUniqueWithoutCoBillsInput;
  deleteMany?: PoliticianScalarWhereInput[] | PoliticianScalarWhereInput;
  updateMany?:
    | PoliticianUpdateManyWithWhereNestedInput[]
    | PoliticianUpdateManyWithWhereNestedInput;
}

export interface BillUpsertWithWhereUniqueWithoutDownvotesInput {
  where: BillWhereUniqueInput;
  update: BillUpdateWithoutDownvotesDataInput;
  create: BillCreateWithoutDownvotesInput;
}

export interface PoliticianUpdateWithoutCoBillsDataInput {
  party?: String;
  name?: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
  followers?: UserUpdateOneWithoutMyPoliticiansInput;
  bills?: BillUpdateManyInput;
  mentions?: CommentUpdateManyWithoutPoliticiansMentionedInput;
}

export interface BillScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  summary?: String;
  summary_not?: String;
  summary_in?: String[] | String;
  summary_not_in?: String[] | String;
  summary_lt?: String;
  summary_lte?: String;
  summary_gt?: String;
  summary_gte?: String;
  summary_contains?: String;
  summary_not_contains?: String;
  summary_starts_with?: String;
  summary_not_starts_with?: String;
  summary_ends_with?: String;
  summary_not_ends_with?: String;
  congressNumber?: String;
  congressNumber_not?: String;
  congressNumber_in?: String[] | String;
  congressNumber_not_in?: String[] | String;
  congressNumber_lt?: String;
  congressNumber_lte?: String;
  congressNumber_gt?: String;
  congressNumber_gte?: String;
  congressNumber_contains?: String;
  congressNumber_not_contains?: String;
  congressNumber_starts_with?: String;
  congressNumber_not_starts_with?: String;
  congressNumber_ends_with?: String;
  congressNumber_not_ends_with?: String;
  chamber?: String;
  chamber_not?: String;
  chamber_in?: String[] | String;
  chamber_not_in?: String[] | String;
  chamber_lt?: String;
  chamber_lte?: String;
  chamber_gt?: String;
  chamber_gte?: String;
  chamber_contains?: String;
  chamber_not_contains?: String;
  chamber_starts_with?: String;
  chamber_not_starts_with?: String;
  chamber_ends_with?: String;
  chamber_not_ends_with?: String;
  committees?: String;
  committees_not?: String;
  committees_in?: String[] | String;
  committees_not_in?: String[] | String;
  committees_lt?: String;
  committees_lte?: String;
  committees_gt?: String;
  committees_gte?: String;
  committees_contains?: String;
  committees_not_contains?: String;
  committees_starts_with?: String;
  committees_not_starts_with?: String;
  committees_ends_with?: String;
  committees_not_ends_with?: String;
  link?: String;
  link_not?: String;
  link_in?: String[] | String;
  link_not_in?: String[] | String;
  link_lt?: String;
  link_lte?: String;
  link_gt?: String;
  link_gte?: String;
  link_contains?: String;
  link_not_contains?: String;
  link_starts_with?: String;
  link_not_starts_with?: String;
  link_ends_with?: String;
  link_not_ends_with?: String;
  sponsor?: String;
  sponsor_not?: String;
  sponsor_in?: String[] | String;
  sponsor_not_in?: String[] | String;
  sponsor_lt?: String;
  sponsor_lte?: String;
  sponsor_gt?: String;
  sponsor_gte?: String;
  sponsor_contains?: String;
  sponsor_not_contains?: String;
  sponsor_starts_with?: String;
  sponsor_not_starts_with?: String;
  sponsor_ends_with?: String;
  sponsor_not_ends_with?: String;
  AND?: BillScalarWhereInput[] | BillScalarWhereInput;
  OR?: BillScalarWhereInput[] | BillScalarWhereInput;
  NOT?: BillScalarWhereInput[] | BillScalarWhereInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password?: String;
  permissions?: UserCreatepermissionsInput;
  myPoliticians?: PoliticianCreateManyWithoutFollowersInput;
  myBills?: BillCreateManyWithoutFollowersInput;
  upvotedBills?: BillCreateManyWithoutUpvotesInput;
  downvotedBills?: BillCreateManyWithoutDownvotesInput;
  billComments?: CommentCreateManyWithoutAuthorInput;
  topicComments?: TopicCreateManyWithoutCommentersInput;
  notifications?: NotificationCreateManyWithoutUserInput;
}

export interface BillUpdateManyWithWhereNestedInput {
  where: BillScalarWhereInput;
  data: BillUpdateManyDataInput;
}

export interface BillCreateOneInput {
  create?: BillCreateInput;
  connect?: BillWhereUniqueInput;
}

export interface BillUpdateManyDataInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  actions?: BillUpdateactionsInput;
}

export interface PoliticianUpdateManyMutationInput {
  party?: String;
  name?: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
}

export interface TopicUpdateManyWithoutCommentersInput {
  create?:
    | TopicCreateWithoutCommentersInput[]
    | TopicCreateWithoutCommentersInput;
  delete?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  connect?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  disconnect?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
  update?:
    | TopicUpdateWithWhereUniqueWithoutCommentersInput[]
    | TopicUpdateWithWhereUniqueWithoutCommentersInput;
  upsert?:
    | TopicUpsertWithWhereUniqueWithoutCommentersInput[]
    | TopicUpsertWithWhereUniqueWithoutCommentersInput;
  deleteMany?: TopicScalarWhereInput[] | TopicScalarWhereInput;
  updateMany?:
    | TopicUpdateManyWithWhereNestedInput[]
    | TopicUpdateManyWithWhereNestedInput;
}

export interface UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface TopicUpdateWithWhereUniqueWithoutCommentersInput {
  where: TopicWhereUniqueInput;
  data: TopicUpdateWithoutCommentersDataInput;
}

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TopicUpdateWithoutCommentersDataInput {
  title?: String;
  comments?: CommentUpdateManyWithoutTopicInput;
}

export type PoliticianWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface CommentUpdateManyWithoutTopicInput {
  create?: CommentCreateWithoutTopicInput[] | CommentCreateWithoutTopicInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutTopicInput[]
    | CommentUpdateWithWhereUniqueWithoutTopicInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutTopicInput[]
    | CommentUpsertWithWhereUniqueWithoutTopicInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface SubscriptionWhereInput {
  newBillComment?: CommentWhereInput;
  newBill?: BillWhereInput;
  AND?: SubscriptionWhereInput[] | SubscriptionWhereInput;
  OR?: SubscriptionWhereInput[] | SubscriptionWhereInput;
  NOT?: SubscriptionWhereInput[] | SubscriptionWhereInput;
}

export interface CommentUpdateWithWhereUniqueWithoutTopicInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutTopicDataInput;
}

export interface CommentCreateInput {
  content?: String;
  reply?: String;
  bill?: BillCreateOneWithoutCommentsInput;
  author?: UserCreateOneWithoutBillCommentsInput;
  politiciansMentioned?: PoliticianCreateManyWithoutMentionsInput;
  topic?: TopicCreateOneWithoutCommentsInput;
}

export interface CommentUpdateWithoutTopicDataInput {
  content?: String;
  reply?: String;
  bill?: BillUpdateOneWithoutCommentsInput;
  author?: UserUpdateOneWithoutBillCommentsInput;
  politiciansMentioned?: PoliticianUpdateManyWithoutMentionsInput;
}

export interface UserUpsertWithoutMyPoliticiansInput {
  update: UserUpdateWithoutMyPoliticiansDataInput;
  create: UserCreateWithoutMyPoliticiansInput;
}

export interface CommentUpsertWithWhereUniqueWithoutTopicInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutTopicDataInput;
  create: CommentCreateWithoutTopicInput;
}

export interface PoliticianUpsertWithWhereUniqueWithoutFollowersInput {
  where: PoliticianWhereUniqueInput;
  update: PoliticianUpdateWithoutFollowersDataInput;
  create: PoliticianCreateWithoutFollowersInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  reply?: String;
  reply_not?: String;
  reply_in?: String[] | String;
  reply_not_in?: String[] | String;
  reply_lt?: String;
  reply_lte?: String;
  reply_gt?: String;
  reply_gte?: String;
  reply_contains?: String;
  reply_not_contains?: String;
  reply_starts_with?: String;
  reply_not_starts_with?: String;
  reply_ends_with?: String;
  reply_not_ends_with?: String;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface PoliticianCreateWithoutCoBillsInput {
  party?: String;
  name: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
  followers?: UserCreateOneWithoutMyPoliticiansInput;
  bills?: BillCreateManyInput;
  mentions?: CommentCreateManyWithoutPoliticiansMentionedInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface BillCreateManyWithoutFollowersInput {
  create?: BillCreateWithoutFollowersInput[] | BillCreateWithoutFollowersInput;
  connect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
}

export interface CommentUpdateManyDataInput {
  content?: String;
  reply?: String;
}

export interface UserCreateWithoutUpvotedBillsInput {
  name: String;
  email: String;
  password?: String;
  permissions?: UserCreatepermissionsInput;
  myPoliticians?: PoliticianCreateManyWithoutFollowersInput;
  myBills?: BillCreateManyWithoutFollowersInput;
  downvotedBills?: BillCreateManyWithoutDownvotesInput;
  billComments?: CommentCreateManyWithoutAuthorInput;
  topicComments?: TopicCreateManyWithoutCommentersInput;
  notifications?: NotificationCreateManyWithoutUserInput;
}

export interface TopicUpsertWithWhereUniqueWithoutCommentersInput {
  where: TopicWhereUniqueInput;
  update: TopicUpdateWithoutCommentersDataInput;
  create: TopicCreateWithoutCommentersInput;
}

export interface BillCreateManyWithoutCoSponsorsInput {
  create?:
    | BillCreateWithoutCoSponsorsInput[]
    | BillCreateWithoutCoSponsorsInput;
  connect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
}

export interface TopicScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: TopicScalarWhereInput[] | TopicScalarWhereInput;
  OR?: TopicScalarWhereInput[] | TopicScalarWhereInput;
  NOT?: TopicScalarWhereInput[] | TopicScalarWhereInput;
}

export interface BillCreateManyWithoutUpvotesInput {
  create?: BillCreateWithoutUpvotesInput[] | BillCreateWithoutUpvotesInput;
  connect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
}

export interface TopicUpdateManyWithWhereNestedInput {
  where: TopicScalarWhereInput;
  data: TopicUpdateManyDataInput;
}

export interface CommentCreateManyWithoutAuthorInput {
  create?: CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface TopicUpdateManyDataInput {
  title?: String;
}

export interface PoliticianCreateManyWithoutMentionsInput {
  create?:
    | PoliticianCreateWithoutMentionsInput[]
    | PoliticianCreateWithoutMentionsInput;
  connect?: PoliticianWhereUniqueInput[] | PoliticianWhereUniqueInput;
}

export interface NotificationUpdateManyWithoutUserInput {
  create?:
    | NotificationCreateWithoutUserInput[]
    | NotificationCreateWithoutUserInput;
  delete?: NotificationWhereUniqueInput[] | NotificationWhereUniqueInput;
  connect?: NotificationWhereUniqueInput[] | NotificationWhereUniqueInput;
  disconnect?: NotificationWhereUniqueInput[] | NotificationWhereUniqueInput;
  update?:
    | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    | NotificationUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    | NotificationUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: NotificationScalarWhereInput[] | NotificationScalarWhereInput;
  updateMany?:
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput;
}

export interface UserCreateManyWithoutTopicCommentsInput {
  create?:
    | UserCreateWithoutTopicCommentsInput[]
    | UserCreateWithoutTopicCommentsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutUserDataInput;
}

export interface CommentCreateManyWithoutBillInput {
  create?: CommentCreateWithoutBillInput[] | CommentCreateWithoutBillInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface NotificationUpdateWithoutUserDataInput {
  label?: String;
  type?: String;
}

export interface TopicCreateManyWithoutCommentersInput {
  create?:
    | TopicCreateWithoutCommentersInput[]
    | TopicCreateWithoutCommentersInput;
  connect?: TopicWhereUniqueInput[] | TopicWhereUniqueInput;
}

export interface NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutUserDataInput;
  create: NotificationCreateWithoutUserInput;
}

export interface NotificationCreateManyWithoutUserInput {
  create?:
    | NotificationCreateWithoutUserInput[]
    | NotificationCreateWithoutUserInput;
  connect?: NotificationWhereUniqueInput[] | NotificationWhereUniqueInput;
}

export interface NotificationScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  AND?: NotificationScalarWhereInput[] | NotificationScalarWhereInput;
  OR?: NotificationScalarWhereInput[] | NotificationScalarWhereInput;
  NOT?: NotificationScalarWhereInput[] | NotificationScalarWhereInput;
}

export interface BillUpdateInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianUpdateManyWithoutCoBillsInput;
  actions?: BillUpdateactionsInput;
  followers?: UserUpdateManyWithoutMyBillsInput;
  upvotes?: UserUpdateManyWithoutUpvotedBillsInput;
  downvotes?: UserUpdateManyWithoutDownvotedBillsInput;
  comments?: CommentUpdateManyWithoutBillInput;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  myPoliticians?: PoliticianUpdateManyWithoutFollowersInput;
  myBills?: BillUpdateManyWithoutFollowersInput;
  upvotedBills?: BillUpdateManyWithoutUpvotesInput;
  downvotedBills?: BillUpdateManyWithoutDownvotesInput;
  billComments?: CommentUpdateManyWithoutAuthorInput;
  topicComments?: TopicUpdateManyWithoutCommentersInput;
  notifications?: NotificationUpdateManyWithoutUserInput;
}

export interface NotificationUpdateManyDataInput {
  label?: String;
  type?: String;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpsertWithoutBillCommentsInput {
  update: UserUpdateWithoutBillCommentsDataInput;
  create: UserCreateWithoutBillCommentsInput;
}

export interface UserUpdateOneWithoutNotificationsInput {
  create?: UserCreateWithoutNotificationsInput;
  update?: UserUpdateWithoutNotificationsDataInput;
  upsert?: UserUpsertWithoutNotificationsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface TopicUpdateOneWithoutCommentsInput {
  create?: TopicCreateWithoutCommentsInput;
  update?: TopicUpdateWithoutCommentsDataInput;
  upsert?: TopicUpsertWithoutCommentsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TopicWhereUniqueInput;
}

export interface PoliticianCreateInput {
  party?: String;
  name: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
  followers?: UserCreateOneWithoutMyPoliticiansInput;
  bills?: BillCreateManyInput;
  coBills?: BillCreateManyWithoutCoSponsorsInput;
  mentions?: CommentCreateManyWithoutPoliticiansMentionedInput;
}

export interface TopicUpdateWithoutCommentsDataInput {
  title?: String;
  commenters?: UserUpdateManyWithoutTopicCommentsInput;
}

export interface BillUpdateManyMutationInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  actions?: BillUpdateactionsInput;
}

export interface UserUpdateManyWithoutTopicCommentsInput {
  create?:
    | UserCreateWithoutTopicCommentsInput[]
    | UserCreateWithoutTopicCommentsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutTopicCommentsInput[]
    | UserUpdateWithWhereUniqueWithoutTopicCommentsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutTopicCommentsInput[]
    | UserUpsertWithWhereUniqueWithoutTopicCommentsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface BillCreateInput {
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  coSponsors?: PoliticianCreateManyWithoutCoBillsInput;
  actions?: BillCreateactionsInput;
  followers?: UserCreateManyWithoutMyBillsInput;
  upvotes?: UserCreateManyWithoutUpvotedBillsInput;
  downvotes?: UserCreateManyWithoutDownvotedBillsInput;
  comments?: CommentCreateManyWithoutBillInput;
}

export interface UserUpdateWithWhereUniqueWithoutTopicCommentsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutTopicCommentsDataInput;
}

export interface BillCreateactionsInput {
  set?: String[] | String;
}

export interface UserUpdateWithoutTopicCommentsDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
  myPoliticians?: PoliticianUpdateManyWithoutFollowersInput;
  myBills?: BillUpdateManyWithoutFollowersInput;
  upvotedBills?: BillUpdateManyWithoutUpvotesInput;
  downvotedBills?: BillUpdateManyWithoutDownvotesInput;
  billComments?: CommentUpdateManyWithoutAuthorInput;
  notifications?: NotificationUpdateManyWithoutUserInput;
}

export interface UserCreateManyWithoutMyBillsInput {
  create?: UserCreateWithoutMyBillsInput[] | UserCreateWithoutMyBillsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutTopicCommentsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutTopicCommentsDataInput;
  create: UserCreateWithoutTopicCommentsInput;
}

export interface BillCreateOneWithoutCommentsInput {
  create?: BillCreateWithoutCommentsInput;
  connect?: BillWhereUniqueInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface BillCreateManyWithoutDownvotesInput {
  create?: BillCreateWithoutDownvotesInput[] | BillCreateWithoutDownvotesInput;
  connect?: BillWhereUniqueInput[] | BillWhereUniqueInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface CommentCreateManyWithoutTopicInput {
  create?: CommentCreateWithoutTopicInput[] | CommentCreateWithoutTopicInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface UserUpdateManyDataInput {
  name?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface PoliticianUpdateWithWhereUniqueWithoutCoBillsInput {
  where: PoliticianWhereUniqueInput;
  data: PoliticianUpdateWithoutCoBillsDataInput;
}

export interface TopicUpsertWithoutCommentsInput {
  update: TopicUpdateWithoutCommentsDataInput;
  create: TopicCreateWithoutCommentsInput;
}

export interface FeedWhereInput {
  politicians_every?: PoliticianWhereInput;
  politicians_some?: PoliticianWhereInput;
  politicians_none?: PoliticianWhereInput;
  bills_every?: BillWhereInput;
  bills_some?: BillWhereInput;
  bills_none?: BillWhereInput;
  count?: Int;
  count_not?: Int;
  count_in?: Int[] | Int;
  count_not_in?: Int[] | Int;
  count_lt?: Int;
  count_lte?: Int;
  count_gt?: Int;
  count_gte?: Int;
  AND?: FeedWhereInput[] | FeedWhereInput;
  OR?: FeedWhereInput[] | FeedWhereInput;
  NOT?: FeedWhereInput[] | FeedWhereInput;
}

export interface CommentUpsertWithWhereUniqueWithoutBillInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutBillDataInput;
  create: CommentCreateWithoutBillInput;
}

export interface CommentUpdateManyMutationInput {
  content?: String;
  reply?: String;
}

export interface BillUpsertWithWhereUniqueWithoutCoSponsorsInput {
  where: BillWhereUniqueInput;
  update: BillUpdateWithoutCoSponsorsDataInput;
  create: BillCreateWithoutCoSponsorsInput;
}

export interface UserCreateWithoutMyPoliticiansInput {
  name: String;
  email: String;
  password?: String;
  permissions?: UserCreatepermissionsInput;
  myBills?: BillCreateManyWithoutFollowersInput;
  upvotedBills?: BillCreateManyWithoutUpvotesInput;
  downvotedBills?: BillCreateManyWithoutDownvotesInput;
  billComments?: CommentCreateManyWithoutAuthorInput;
  topicComments?: TopicCreateManyWithoutCommentersInput;
  notifications?: NotificationCreateManyWithoutUserInput;
}

export interface PoliticianUpsertWithWhereUniqueWithoutMentionsInput {
  where: PoliticianWhereUniqueInput;
  update: PoliticianUpdateWithoutMentionsDataInput;
  create: PoliticianCreateWithoutMentionsInput;
}

export interface UserCreateManyWithoutDownvotedBillsInput {
  create?:
    | UserCreateWithoutDownvotedBillsInput[]
    | UserCreateWithoutDownvotedBillsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface PoliticianScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  party?: String;
  party_not?: String;
  party_in?: String[] | String;
  party_not_in?: String[] | String;
  party_lt?: String;
  party_lte?: String;
  party_gt?: String;
  party_gte?: String;
  party_contains?: String;
  party_not_contains?: String;
  party_starts_with?: String;
  party_not_starts_with?: String;
  party_ends_with?: String;
  party_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  chamber?: String;
  chamber_not?: String;
  chamber_in?: String[] | String;
  chamber_not_in?: String[] | String;
  chamber_lt?: String;
  chamber_lte?: String;
  chamber_gt?: String;
  chamber_gte?: String;
  chamber_contains?: String;
  chamber_not_contains?: String;
  chamber_starts_with?: String;
  chamber_not_starts_with?: String;
  chamber_ends_with?: String;
  chamber_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  district?: Int;
  district_not?: Int;
  district_in?: Int[] | Int;
  district_not_in?: Int[] | Int;
  district_lt?: Int;
  district_lte?: Int;
  district_gt?: Int;
  district_gte?: Int;
  nthCongress?: String;
  nthCongress_not?: String;
  nthCongress_in?: String[] | String;
  nthCongress_not_in?: String[] | String;
  nthCongress_lt?: String;
  nthCongress_lte?: String;
  nthCongress_gt?: String;
  nthCongress_gte?: String;
  nthCongress_contains?: String;
  nthCongress_not_contains?: String;
  nthCongress_starts_with?: String;
  nthCongress_not_starts_with?: String;
  nthCongress_ends_with?: String;
  nthCongress_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  gender?: String;
  gender_not?: String;
  gender_in?: String[] | String;
  gender_not_in?: String[] | String;
  gender_lt?: String;
  gender_lte?: String;
  gender_gt?: String;
  gender_gte?: String;
  gender_contains?: String;
  gender_not_contains?: String;
  gender_starts_with?: String;
  gender_not_starts_with?: String;
  gender_ends_with?: String;
  gender_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  largeImage?: String;
  largeImage_not?: String;
  largeImage_in?: String[] | String;
  largeImage_not_in?: String[] | String;
  largeImage_lt?: String;
  largeImage_lte?: String;
  largeImage_gt?: String;
  largeImage_gte?: String;
  largeImage_contains?: String;
  largeImage_not_contains?: String;
  largeImage_starts_with?: String;
  largeImage_not_starts_with?: String;
  largeImage_ends_with?: String;
  largeImage_not_ends_with?: String;
  website?: String;
  website_not?: String;
  website_in?: String[] | String;
  website_not_in?: String[] | String;
  website_lt?: String;
  website_lte?: String;
  website_gt?: String;
  website_gte?: String;
  website_contains?: String;
  website_not_contains?: String;
  website_starts_with?: String;
  website_not_starts_with?: String;
  website_ends_with?: String;
  website_not_ends_with?: String;
  govUrl?: String;
  govUrl_not?: String;
  govUrl_in?: String[] | String;
  govUrl_not_in?: String[] | String;
  govUrl_lt?: String;
  govUrl_lte?: String;
  govUrl_gt?: String;
  govUrl_gte?: String;
  govUrl_contains?: String;
  govUrl_not_contains?: String;
  govUrl_starts_with?: String;
  govUrl_not_starts_with?: String;
  govUrl_ends_with?: String;
  govUrl_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PoliticianScalarWhereInput[] | PoliticianScalarWhereInput;
  OR?: PoliticianScalarWhereInput[] | PoliticianScalarWhereInput;
  NOT?: PoliticianScalarWhereInput[] | PoliticianScalarWhereInput;
}

export interface UserCreateOneWithoutBillCommentsInput {
  create?: UserCreateWithoutBillCommentsInput;
  connect?: UserWhereUniqueInput;
}

export interface PoliticianUpdateManyWithWhereNestedInput {
  where: PoliticianScalarWhereInput;
  data: PoliticianUpdateManyDataInput;
}

export interface TopicUpdateInput {
  title?: String;
  comments?: CommentUpdateManyWithoutTopicInput;
  commenters?: UserUpdateManyWithoutTopicCommentsInput;
}

export interface PoliticianUpdateManyDataInput {
  party?: String;
  name?: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
}

export interface BillUpsertWithWhereUniqueWithoutFollowersInput {
  where: BillWhereUniqueInput;
  update: BillUpdateWithoutFollowersDataInput;
  create: BillCreateWithoutFollowersInput;
}

export interface UserUpsertWithWhereUniqueWithoutMyBillsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMyBillsDataInput;
  create: UserCreateWithoutMyBillsInput;
}

export interface BillUpsertWithWhereUniqueWithoutUpvotesInput {
  where: BillWhereUniqueInput;
  update: BillUpdateWithoutUpvotesDataInput;
  create: BillCreateWithoutUpvotesInput;
}

export interface UserUpsertWithWhereUniqueWithoutDownvotedBillsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutDownvotedBillsDataInput;
  create: UserCreateWithoutDownvotedBillsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAuthorDataInput;
  create: CommentCreateWithoutAuthorInput;
}

export interface PoliticianCreateWithoutFollowersInput {
  party?: String;
  name: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
  bills?: BillCreateManyInput;
  coBills?: BillCreateManyWithoutCoSponsorsInput;
  mentions?: CommentCreateManyWithoutPoliticiansMentionedInput;
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: UserCreateWithoutNotificationsInput;
  connect?: UserWhereUniqueInput;
}

export interface CommentCreateManyWithoutPoliticiansMentionedInput {
  create?:
    | CommentCreateWithoutPoliticiansMentionedInput[]
    | CommentCreateWithoutPoliticiansMentionedInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface TopicCreateOneWithoutCommentsInput {
  create?: TopicCreateWithoutCommentsInput;
  connect?: TopicWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Politician {
  id: ID_Output;
  party?: String;
  name: String;
  title?: String;
  chamber?: String;
  state?: String;
  district?: Int;
  nthCongress?: String;
  phone?: String;
  gender?: String;
  image?: String;
  largeImage?: String;
  website?: String;
  govUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PoliticianPromise extends Promise<Politician>, Fragmentable {
  id: () => Promise<ID_Output>;
  party: () => Promise<String>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  chamber: () => Promise<String>;
  state: () => Promise<String>;
  district: () => Promise<Int>;
  nthCongress: () => Promise<String>;
  phone: () => Promise<String>;
  gender: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  website: () => Promise<String>;
  govUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  followers: <T = UserPromise>() => T;
  bills: <T = FragmentableArray<Bill>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  coBills: <T = FragmentableArray<Bill>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PoliticianSubscription
  extends Promise<AsyncIterator<Politician>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  party: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  chamber: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<Int>>;
  nthCongress: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  govUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  followers: <T = UserSubscription>() => T;
  bills: <T = Promise<AsyncIterator<BillSubscription>>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  coBills: <T = Promise<AsyncIterator<BillSubscription>>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mentions: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Topic {
  id: ID_Output;
  title?: String;
}

export interface TopicPromise extends Promise<Topic>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commenters: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TopicSubscription
  extends Promise<AsyncIterator<Topic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commenters: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password?: String;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  myPoliticians: <T = FragmentableArray<Politician>>(args?: {
    where?: PoliticianWhereInput;
    orderBy?: PoliticianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myBills: <T = FragmentableArray<Bill>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  upvotedBills: <T = FragmentableArray<Bill>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  downvotedBills: <T = FragmentableArray<Bill>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  billComments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicComments: <T = FragmentableArray<Topic>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  myPoliticians: <T = Promise<AsyncIterator<PoliticianSubscription>>>(args?: {
    where?: PoliticianWhereInput;
    orderBy?: PoliticianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myBills: <T = Promise<AsyncIterator<BillSubscription>>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  upvotedBills: <T = Promise<AsyncIterator<BillSubscription>>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  downvotedBills: <T = Promise<AsyncIterator<BillSubscription>>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  billComments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topicComments: <T = Promise<AsyncIterator<TopicSubscription>>>(args?: {
    where?: TopicWhereInput;
    orderBy?: TopicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateFeed {
  count: Int;
}

export interface AggregateFeedPromise
  extends Promise<AggregateFeed>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeedSubscription
  extends Promise<AsyncIterator<AggregateFeed>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface FeedEdge {
  node: Feed;
  cursor: String;
}

export interface FeedEdgePromise extends Promise<FeedEdge>, Fragmentable {
  node: <T = FeedPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeedEdgeSubscription
  extends Promise<AsyncIterator<FeedEdge>>,
    Fragmentable {
  node: <T = FeedSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TopicEdge {
  node: Topic;
  cursor: String;
}

export interface TopicEdgePromise extends Promise<TopicEdge>, Fragmentable {
  node: <T = TopicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TopicEdgeSubscription
  extends Promise<AsyncIterator<TopicEdge>>,
    Fragmentable {
  node: <T = TopicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FeedConnection {
  pageInfo: PageInfo;
  edges: FeedEdge[];
}

export interface FeedConnectionPromise
  extends Promise<FeedConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeedEdge>>() => T;
  aggregate: <T = AggregateFeedPromise>() => T;
}

export interface FeedConnectionSubscription
  extends Promise<AsyncIterator<FeedConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeedEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeedSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Feed {
  count: Int;
}

export interface FeedPromise extends Promise<Feed>, Fragmentable {
  politicians: <T = FragmentableArray<Politician>>(args?: {
    where?: PoliticianWhereInput;
    orderBy?: PoliticianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bills: <T = FragmentableArray<Bill>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  count: () => Promise<Int>;
}

export interface FeedSubscription
  extends Promise<AsyncIterator<Feed>>,
    Fragmentable {
  politicians: <T = Promise<AsyncIterator<PoliticianSubscription>>>(args?: {
    where?: PoliticianWhereInput;
    orderBy?: PoliticianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bills: <T = Promise<AsyncIterator<BillSubscription>>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSubscription {
  count: Int;
}

export interface AggregateSubscriptionPromise
  extends Promise<AggregateSubscription>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubscriptionSubscription
  extends Promise<AsyncIterator<AggregateSubscription>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BillConnection {
  pageInfo: PageInfo;
  edges: BillEdge[];
}

export interface BillConnectionPromise
  extends Promise<BillConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BillEdge>>() => T;
  aggregate: <T = AggregateBillPromise>() => T;
}

export interface BillConnectionSubscription
  extends Promise<AsyncIterator<BillConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BillEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBillSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SubscriptionEdge {
  node: Subscription;
  cursor: String;
}

export interface SubscriptionEdgePromise
  extends Promise<SubscriptionEdge>,
    Fragmentable {
  node: <T = SubscriptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubscriptionEdgeSubscription
  extends Promise<AsyncIterator<SubscriptionEdge>>,
    Fragmentable {
  node: <T = SubscriptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SubscriptionConnection {
  pageInfo: PageInfo;
  edges: SubscriptionEdge[];
}

export interface SubscriptionConnectionPromise
  extends Promise<SubscriptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubscriptionEdge>>() => T;
  aggregate: <T = AggregateSubscriptionPromise>() => T;
}

export interface SubscriptionConnectionSubscription
  extends Promise<AsyncIterator<SubscriptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubscriptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubscriptionSubscription>() => T;
}

export interface Bill {
  id: ID_Output;
  code?: String;
  title?: String;
  summary?: String;
  congressNumber?: String;
  chamber?: String;
  committees?: String;
  link?: String;
  sponsor?: String;
  actions: String[];
}

export interface BillPromise extends Promise<Bill>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  title: () => Promise<String>;
  summary: () => Promise<String>;
  congressNumber: () => Promise<String>;
  chamber: () => Promise<String>;
  committees: () => Promise<String>;
  link: () => Promise<String>;
  sponsor: () => Promise<String>;
  coSponsors: <T = FragmentableArray<Politician>>(args?: {
    where?: PoliticianWhereInput;
    orderBy?: PoliticianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  actions: () => Promise<String[]>;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  upvotes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  downvotes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BillSubscription
  extends Promise<AsyncIterator<Bill>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  congressNumber: () => Promise<AsyncIterator<String>>;
  chamber: () => Promise<AsyncIterator<String>>;
  committees: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
  sponsor: () => Promise<AsyncIterator<String>>;
  coSponsors: <T = Promise<AsyncIterator<PoliticianSubscription>>>(args?: {
    where?: PoliticianWhereInput;
    orderBy?: PoliticianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  actions: () => Promise<AsyncIterator<String[]>>;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  upvotes: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  downvotes: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PoliticianEdge {
  node: Politician;
  cursor: String;
}

export interface PoliticianEdgePromise
  extends Promise<PoliticianEdge>,
    Fragmentable {
  node: <T = PoliticianPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PoliticianEdgeSubscription
  extends Promise<AsyncIterator<PoliticianEdge>>,
    Fragmentable {
  node: <T = PoliticianSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Comment {
  id: ID_Output;
  content?: String;
  reply?: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  reply: () => Promise<String>;
  bill: <T = BillPromise>() => T;
  author: <T = UserPromise>() => T;
  politiciansMentioned: <T = FragmentableArray<Politician>>(args?: {
    where?: PoliticianWhereInput;
    orderBy?: PoliticianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topic: <T = TopicPromise>() => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  reply: () => Promise<AsyncIterator<String>>;
  bill: <T = BillSubscription>() => T;
  author: <T = UserSubscription>() => T;
  politiciansMentioned: <
    T = Promise<AsyncIterator<PoliticianSubscription>>
  >(args?: {
    where?: PoliticianWhereInput;
    orderBy?: PoliticianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topic: <T = TopicSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BillEdge {
  node: Bill;
  cursor: String;
}

export interface BillEdgePromise extends Promise<BillEdge>, Fragmentable {
  node: <T = BillPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BillEdgeSubscription
  extends Promise<AsyncIterator<BillEdge>>,
    Fragmentable {
  node: <T = BillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBill {
  count: Int;
}

export interface AggregateBillPromise
  extends Promise<AggregateBill>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBillSubscription
  extends Promise<AsyncIterator<AggregateBill>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTopic {
  count: Int;
}

export interface AggregateTopicPromise
  extends Promise<AggregateTopic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTopicSubscription
  extends Promise<AsyncIterator<AggregateTopic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Notification {
  id: ID_Output;
  label?: String;
  type?: String;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  type: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface PoliticianConnection {
  pageInfo: PageInfo;
  edges: PoliticianEdge[];
}

export interface PoliticianConnectionPromise
  extends Promise<PoliticianConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PoliticianEdge>>() => T;
  aggregate: <T = AggregatePoliticianPromise>() => T;
}

export interface PoliticianConnectionSubscription
  extends Promise<AsyncIterator<PoliticianConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PoliticianEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePoliticianSubscription>() => T;
}

export interface AggregatePolitician {
  count: Int;
}

export interface AggregatePoliticianPromise
  extends Promise<AggregatePolitician>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePoliticianSubscription
  extends Promise<AsyncIterator<AggregatePolitician>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TopicConnection {
  pageInfo: PageInfo;
  edges: TopicEdge[];
}

export interface TopicConnectionPromise
  extends Promise<TopicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TopicEdge>>() => T;
  aggregate: <T = AggregateTopicPromise>() => T;
}

export interface TopicConnectionSubscription
  extends Promise<AsyncIterator<TopicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TopicEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTopicSubscription>() => T;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Bill",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Feed",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "Politician",
    embedded: false
  },
  {
    name: "Subscription",
    embedded: false
  },
  {
    name: "Topic",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
